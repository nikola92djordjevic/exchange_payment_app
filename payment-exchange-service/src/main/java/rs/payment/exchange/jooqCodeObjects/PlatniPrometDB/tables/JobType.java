/*
 * This file is generated by jOOQ.
 */
package PlatniPrometDB.tables;


import PlatniPrometDB.Keys;
import PlatniPrometDB.Public;
import PlatniPrometDB.tables.records.JobTypeRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JobType extends TableImpl<JobTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.job_type</code>
     */
    public static final JobType JOB_TYPE = new JobType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JobTypeRecord> getRecordType() {
        return JobTypeRecord.class;
    }

    /**
     * The column <code>public.job_type.job_type_id</code>.
     */
    public final TableField<JobTypeRecord, Long> JOB_TYPE_ID = createField(DSL.name("job_type_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.job_type.name</code>.
     */
    public final TableField<JobTypeRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.job_type.description</code>.
     */
    public final TableField<JobTypeRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(500), this, "");

    private JobType(Name alias, Table<JobTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private JobType(Name alias, Table<JobTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.job_type</code> table reference
     */
    public JobType(String alias) {
        this(DSL.name(alias), JOB_TYPE);
    }

    /**
     * Create an aliased <code>public.job_type</code> table reference
     */
    public JobType(Name alias) {
        this(alias, JOB_TYPE);
    }

    /**
     * Create a <code>public.job_type</code> table reference
     */
    public JobType() {
        this(DSL.name("job_type"), null);
    }

    public <O extends Record> JobType(Table<O> child, ForeignKey<O, JobTypeRecord> key) {
        super(child, key, JOB_TYPE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<JobTypeRecord, Long> getIdentity() {
        return (Identity<JobTypeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JobTypeRecord> getPrimaryKey() {
        return Keys.JOB_TYPE_PKEY;
    }

    @Override
    public JobType as(String alias) {
        return new JobType(DSL.name(alias), this);
    }

    @Override
    public JobType as(Name alias) {
        return new JobType(alias, this);
    }

    @Override
    public JobType as(Table<?> alias) {
        return new JobType(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JobType rename(String name) {
        return new JobType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobType rename(Name name) {
        return new JobType(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JobType rename(Table<?> name) {
        return new JobType(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
