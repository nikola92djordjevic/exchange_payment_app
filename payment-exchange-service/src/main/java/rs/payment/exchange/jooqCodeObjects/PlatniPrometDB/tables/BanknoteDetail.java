/*
 * This file is generated by jOOQ.
 */
package PlatniPrometDB.tables;


import PlatniPrometDB.Keys;
import PlatniPrometDB.Public;
import PlatniPrometDB.tables.records.BanknoteDetailRecord;

import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function14;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row14;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BanknoteDetail extends TableImpl<BanknoteDetailRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.banknote_detail</code>
     */
    public static final BanknoteDetail BANKNOTE_DETAIL = new BanknoteDetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BanknoteDetailRecord> getRecordType() {
        return BanknoteDetailRecord.class;
    }

    /**
     * The column <code>public.banknote_detail.banknote_detail_id</code>.
     */
    public final TableField<BanknoteDetailRecord, Long> BANKNOTE_DETAIL_ID = createField(DSL.name("banknote_detail_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.banknote_detail.balance_entry_id</code>.
     */
    public final TableField<BanknoteDetailRecord, Long> BALANCE_ENTRY_ID = createField(DSL.name("balance_entry_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.banknote_detail.x1</code>.
     */
    public final TableField<BanknoteDetailRecord, Integer> X1 = createField(DSL.name("x1"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.banknote_detail.x2</code>.
     */
    public final TableField<BanknoteDetailRecord, Integer> X2 = createField(DSL.name("x2"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.banknote_detail.x5</code>.
     */
    public final TableField<BanknoteDetailRecord, Integer> X5 = createField(DSL.name("x5"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.banknote_detail.x10</code>.
     */
    public final TableField<BanknoteDetailRecord, Integer> X10 = createField(DSL.name("x10"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.banknote_detail.x20</code>.
     */
    public final TableField<BanknoteDetailRecord, Integer> X20 = createField(DSL.name("x20"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.banknote_detail.x50</code>.
     */
    public final TableField<BanknoteDetailRecord, Integer> X50 = createField(DSL.name("x50"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.banknote_detail.x100</code>.
     */
    public final TableField<BanknoteDetailRecord, Integer> X100 = createField(DSL.name("x100"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.banknote_detail.x200</code>.
     */
    public final TableField<BanknoteDetailRecord, Integer> X200 = createField(DSL.name("x200"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.banknote_detail.x500</code>.
     */
    public final TableField<BanknoteDetailRecord, Integer> X500 = createField(DSL.name("x500"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.banknote_detail.x1000</code>.
     */
    public final TableField<BanknoteDetailRecord, Integer> X1000 = createField(DSL.name("x1000"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.banknote_detail.x2000</code>.
     */
    public final TableField<BanknoteDetailRecord, Integer> X2000 = createField(DSL.name("x2000"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.banknote_detail.x5000</code>.
     */
    public final TableField<BanknoteDetailRecord, Integer> X5000 = createField(DSL.name("x5000"), SQLDataType.INTEGER, this, "");

    private BanknoteDetail(Name alias, Table<BanknoteDetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private BanknoteDetail(Name alias, Table<BanknoteDetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.banknote_detail</code> table reference
     */
    public BanknoteDetail(String alias) {
        this(DSL.name(alias), BANKNOTE_DETAIL);
    }

    /**
     * Create an aliased <code>public.banknote_detail</code> table reference
     */
    public BanknoteDetail(Name alias) {
        this(alias, BANKNOTE_DETAIL);
    }

    /**
     * Create a <code>public.banknote_detail</code> table reference
     */
    public BanknoteDetail() {
        this(DSL.name("banknote_detail"), null);
    }

    public <O extends Record> BanknoteDetail(Table<O> child, ForeignKey<O, BanknoteDetailRecord> key) {
        super(child, key, BANKNOTE_DETAIL);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<BanknoteDetailRecord, Long> getIdentity() {
        return (Identity<BanknoteDetailRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BanknoteDetailRecord> getPrimaryKey() {
        return Keys.BANKNOTE_DETAIL_PKEY;
    }

    @Override
    public BanknoteDetail as(String alias) {
        return new BanknoteDetail(DSL.name(alias), this);
    }

    @Override
    public BanknoteDetail as(Name alias) {
        return new BanknoteDetail(alias, this);
    }

    @Override
    public BanknoteDetail as(Table<?> alias) {
        return new BanknoteDetail(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BanknoteDetail rename(String name) {
        return new BanknoteDetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BanknoteDetail rename(Name name) {
        return new BanknoteDetail(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BanknoteDetail rename(Table<?> name) {
        return new BanknoteDetail(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row14 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row14<Long, Long, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function14<? super Long, ? super Long, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function14<? super Long, ? super Long, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
