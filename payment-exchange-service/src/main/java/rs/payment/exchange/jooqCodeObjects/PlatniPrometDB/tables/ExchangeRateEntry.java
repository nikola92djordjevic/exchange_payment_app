/*
 * This file is generated by jOOQ.
 */
package PlatniPrometDB.tables;


import PlatniPrometDB.Keys;
import PlatniPrometDB.Public;
import PlatniPrometDB.tables.records.ExchangeRateEntryRecord;

import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExchangeRateEntry extends TableImpl<ExchangeRateEntryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.exchange_rate_entry</code>
     */
    public static final ExchangeRateEntry EXCHANGE_RATE_ENTRY = new ExchangeRateEntry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExchangeRateEntryRecord> getRecordType() {
        return ExchangeRateEntryRecord.class;
    }

    /**
     * The column
     * <code>public.exchange_rate_entry.exchange_rate_entry_id</code>.
     */
    public final TableField<ExchangeRateEntryRecord, Long> EXCHANGE_RATE_ENTRY_ID = createField(DSL.name("exchange_rate_entry_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.exchange_rate_entry.exchange_rate_id</code>.
     */
    public final TableField<ExchangeRateEntryRecord, Long> EXCHANGE_RATE_ID = createField(DSL.name("exchange_rate_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.exchange_rate_entry.currency_code</code>.
     */
    public final TableField<ExchangeRateEntryRecord, String> CURRENCY_CODE = createField(DSL.name("currency_code"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.exchange_rate_entry.currency_name_code</code>.
     */
    public final TableField<ExchangeRateEntryRecord, String> CURRENCY_NAME_CODE = createField(DSL.name("currency_name_code"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.exchange_rate_entry.buy_rate</code>.
     */
    public final TableField<ExchangeRateEntryRecord, BigDecimal> BUY_RATE = createField(DSL.name("buy_rate"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.exchange_rate_entry.middle_rate</code>.
     */
    public final TableField<ExchangeRateEntryRecord, BigDecimal> MIDDLE_RATE = createField(DSL.name("middle_rate"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.exchange_rate_entry.sell_rate</code>.
     */
    public final TableField<ExchangeRateEntryRecord, BigDecimal> SELL_RATE = createField(DSL.name("sell_rate"), SQLDataType.NUMERIC(10, 2), this, "");

    /**
     * The column <code>public.exchange_rate_entry.timestamp_of_creating</code>.
     */
    public final TableField<ExchangeRateEntryRecord, OffsetDateTime> TIMESTAMP_OF_CREATING = createField(DSL.name("timestamp_of_creating"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private ExchangeRateEntry(Name alias, Table<ExchangeRateEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExchangeRateEntry(Name alias, Table<ExchangeRateEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.exchange_rate_entry</code> table reference
     */
    public ExchangeRateEntry(String alias) {
        this(DSL.name(alias), EXCHANGE_RATE_ENTRY);
    }

    /**
     * Create an aliased <code>public.exchange_rate_entry</code> table reference
     */
    public ExchangeRateEntry(Name alias) {
        this(alias, EXCHANGE_RATE_ENTRY);
    }

    /**
     * Create a <code>public.exchange_rate_entry</code> table reference
     */
    public ExchangeRateEntry() {
        this(DSL.name("exchange_rate_entry"), null);
    }

    public <O extends Record> ExchangeRateEntry(Table<O> child, ForeignKey<O, ExchangeRateEntryRecord> key) {
        super(child, key, EXCHANGE_RATE_ENTRY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ExchangeRateEntryRecord, Long> getIdentity() {
        return (Identity<ExchangeRateEntryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExchangeRateEntryRecord> getPrimaryKey() {
        return Keys.EXCHANGE_RATE_ENTRY_PKEY;
    }

    @Override
    public ExchangeRateEntry as(String alias) {
        return new ExchangeRateEntry(DSL.name(alias), this);
    }

    @Override
    public ExchangeRateEntry as(Name alias) {
        return new ExchangeRateEntry(alias, this);
    }

    @Override
    public ExchangeRateEntry as(Table<?> alias) {
        return new ExchangeRateEntry(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExchangeRateEntry rename(String name) {
        return new ExchangeRateEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExchangeRateEntry rename(Name name) {
        return new ExchangeRateEntry(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExchangeRateEntry rename(Table<?> name) {
        return new ExchangeRateEntry(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, String, String, BigDecimal, BigDecimal, BigDecimal, OffsetDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super Long, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super Long, ? super String, ? super String, ? super BigDecimal, ? super BigDecimal, ? super BigDecimal, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
