/*
 * This file is generated by jOOQ.
 */
package PlatniPrometDB.tables;


import PlatniPrometDB.Keys;
import PlatniPrometDB.Public;
import PlatniPrometDB.tables.records.ExchangeRateRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExchangeRate extends TableImpl<ExchangeRateRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.exchange_rate</code>
     */
    public static final ExchangeRate EXCHANGE_RATE = new ExchangeRate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExchangeRateRecord> getRecordType() {
        return ExchangeRateRecord.class;
    }

    /**
     * The column <code>public.exchange_rate.exchange_rate_id</code>.
     */
    public final TableField<ExchangeRateRecord, Long> EXCHANGE_RATE_ID = createField(DSL.name("exchange_rate_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.exchange_rate.timestamp_of_start</code>.
     */
    public final TableField<ExchangeRateRecord, LocalDate> TIMESTAMP_OF_START = createField(DSL.name("timestamp_of_start"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.exchange_rate.timestamp_of_end</code>.
     */
    public final TableField<ExchangeRateRecord, LocalDate> TIMESTAMP_OF_END = createField(DSL.name("timestamp_of_end"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.exchange_rate.fl_active</code>.
     */
    public final TableField<ExchangeRateRecord, Boolean> FL_ACTIVE = createField(DSL.name("fl_active"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.exchange_rate.created_by</code>.
     */
    public final TableField<ExchangeRateRecord, Long> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.exchange_rate.timestamp_of_creation</code>.
     */
    public final TableField<ExchangeRateRecord, LocalDateTime> TIMESTAMP_OF_CREATION = createField(DSL.name("timestamp_of_creation"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.exchange_rate.changed_by</code>.
     */
    public final TableField<ExchangeRateRecord, Long> CHANGED_BY = createField(DSL.name("changed_by"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.exchange_rate.timestamp_of_change</code>.
     */
    public final TableField<ExchangeRateRecord, LocalDateTime> TIMESTAMP_OF_CHANGE = createField(DSL.name("timestamp_of_change"), SQLDataType.LOCALDATETIME(6), this, "");

    private ExchangeRate(Name alias, Table<ExchangeRateRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExchangeRate(Name alias, Table<ExchangeRateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.exchange_rate</code> table reference
     */
    public ExchangeRate(String alias) {
        this(DSL.name(alias), EXCHANGE_RATE);
    }

    /**
     * Create an aliased <code>public.exchange_rate</code> table reference
     */
    public ExchangeRate(Name alias) {
        this(alias, EXCHANGE_RATE);
    }

    /**
     * Create a <code>public.exchange_rate</code> table reference
     */
    public ExchangeRate() {
        this(DSL.name("exchange_rate"), null);
    }

    public <O extends Record> ExchangeRate(Table<O> child, ForeignKey<O, ExchangeRateRecord> key) {
        super(child, key, EXCHANGE_RATE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ExchangeRateRecord, Long> getIdentity() {
        return (Identity<ExchangeRateRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ExchangeRateRecord> getPrimaryKey() {
        return Keys.EXCHANGE_RATE_PKEY;
    }

    @Override
    public ExchangeRate as(String alias) {
        return new ExchangeRate(DSL.name(alias), this);
    }

    @Override
    public ExchangeRate as(Name alias) {
        return new ExchangeRate(alias, this);
    }

    @Override
    public ExchangeRate as(Table<?> alias) {
        return new ExchangeRate(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExchangeRate rename(String name) {
        return new ExchangeRate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExchangeRate rename(Name name) {
        return new ExchangeRate(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExchangeRate rename(Table<?> name) {
        return new ExchangeRate(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, LocalDate, LocalDate, Boolean, Long, LocalDateTime, Long, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super LocalDate, ? super LocalDate, ? super Boolean, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super LocalDate, ? super LocalDate, ? super Boolean, ? super Long, ? super LocalDateTime, ? super Long, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
