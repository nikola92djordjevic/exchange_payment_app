/*
 * This file is generated by jOOQ.
 */
package PlatniPrometDB.tables.pojos;


import java.io.Serializable;
import java.time.LocalDate;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAuth implements Serializable {

    private static final long serialVersionUID = 1L;

    private Long userId;
    private String salt;
    private Integer iteration;
    private String hash;
    private Integer loginCount;
    private Boolean flLocked;
    private LocalDate dateOfExpiry;

    public UserAuth() {}

    public UserAuth(UserAuth value) {
        this.userId = value.userId;
        this.salt = value.salt;
        this.iteration = value.iteration;
        this.hash = value.hash;
        this.loginCount = value.loginCount;
        this.flLocked = value.flLocked;
        this.dateOfExpiry = value.dateOfExpiry;
    }

    public UserAuth(
        Long userId,
        String salt,
        Integer iteration,
        String hash,
        Integer loginCount,
        Boolean flLocked,
        LocalDate dateOfExpiry
    ) {
        this.userId = userId;
        this.salt = salt;
        this.iteration = iteration;
        this.hash = hash;
        this.loginCount = loginCount;
        this.flLocked = flLocked;
        this.dateOfExpiry = dateOfExpiry;
    }

    /**
     * Getter for <code>public.user_auth.user_id</code>.
     */
    public Long getUserId() {
        return this.userId;
    }

    /**
     * Setter for <code>public.user_auth.user_id</code>.
     */
    public void setUserId(Long userId) {
        this.userId = userId;
    }

    /**
     * Getter for <code>public.user_auth.salt</code>.
     */
    public String getSalt() {
        return this.salt;
    }

    /**
     * Setter for <code>public.user_auth.salt</code>.
     */
    public void setSalt(String salt) {
        this.salt = salt;
    }

    /**
     * Getter for <code>public.user_auth.iteration</code>.
     */
    public Integer getIteration() {
        return this.iteration;
    }

    /**
     * Setter for <code>public.user_auth.iteration</code>.
     */
    public void setIteration(Integer iteration) {
        this.iteration = iteration;
    }

    /**
     * Getter for <code>public.user_auth.hash</code>.
     */
    public String getHash() {
        return this.hash;
    }

    /**
     * Setter for <code>public.user_auth.hash</code>.
     */
    public void setHash(String hash) {
        this.hash = hash;
    }

    /**
     * Getter for <code>public.user_auth.login_count</code>.
     */
    public Integer getLoginCount() {
        return this.loginCount;
    }

    /**
     * Setter for <code>public.user_auth.login_count</code>.
     */
    public void setLoginCount(Integer loginCount) {
        this.loginCount = loginCount;
    }

    /**
     * Getter for <code>public.user_auth.fl_locked</code>.
     */
    public Boolean getFlLocked() {
        return this.flLocked;
    }

    /**
     * Setter for <code>public.user_auth.fl_locked</code>.
     */
    public void setFlLocked(Boolean flLocked) {
        this.flLocked = flLocked;
    }

    /**
     * Getter for <code>public.user_auth.date_of_expiry</code>.
     */
    public LocalDate getDateOfExpiry() {
        return this.dateOfExpiry;
    }

    /**
     * Setter for <code>public.user_auth.date_of_expiry</code>.
     */
    public void setDateOfExpiry(LocalDate dateOfExpiry) {
        this.dateOfExpiry = dateOfExpiry;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final UserAuth other = (UserAuth) obj;
        if (this.userId == null) {
            if (other.userId != null)
                return false;
        }
        else if (!this.userId.equals(other.userId))
            return false;
        if (this.salt == null) {
            if (other.salt != null)
                return false;
        }
        else if (!this.salt.equals(other.salt))
            return false;
        if (this.iteration == null) {
            if (other.iteration != null)
                return false;
        }
        else if (!this.iteration.equals(other.iteration))
            return false;
        if (this.hash == null) {
            if (other.hash != null)
                return false;
        }
        else if (!this.hash.equals(other.hash))
            return false;
        if (this.loginCount == null) {
            if (other.loginCount != null)
                return false;
        }
        else if (!this.loginCount.equals(other.loginCount))
            return false;
        if (this.flLocked == null) {
            if (other.flLocked != null)
                return false;
        }
        else if (!this.flLocked.equals(other.flLocked))
            return false;
        if (this.dateOfExpiry == null) {
            if (other.dateOfExpiry != null)
                return false;
        }
        else if (!this.dateOfExpiry.equals(other.dateOfExpiry))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.userId == null) ? 0 : this.userId.hashCode());
        result = prime * result + ((this.salt == null) ? 0 : this.salt.hashCode());
        result = prime * result + ((this.iteration == null) ? 0 : this.iteration.hashCode());
        result = prime * result + ((this.hash == null) ? 0 : this.hash.hashCode());
        result = prime * result + ((this.loginCount == null) ? 0 : this.loginCount.hashCode());
        result = prime * result + ((this.flLocked == null) ? 0 : this.flLocked.hashCode());
        result = prime * result + ((this.dateOfExpiry == null) ? 0 : this.dateOfExpiry.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("UserAuth (");

        sb.append(userId);
        sb.append(", ").append(salt);
        sb.append(", ").append(iteration);
        sb.append(", ").append(hash);
        sb.append(", ").append(loginCount);
        sb.append(", ").append(flLocked);
        sb.append(", ").append(dateOfExpiry);

        sb.append(")");
        return sb.toString();
    }
}
