/*
 * This file is generated by jOOQ.
 */
package PlatniPrometDB.tables;


import PlatniPrometDB.Keys;
import PlatniPrometDB.Public;
import PlatniPrometDB.tables.records.UserPersonalInfoRecord;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserPersonalInfo extends TableImpl<UserPersonalInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_personal_info</code>
     */
    public static final UserPersonalInfo USER_PERSONAL_INFO = new UserPersonalInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserPersonalInfoRecord> getRecordType() {
        return UserPersonalInfoRecord.class;
    }

    /**
     * The column <code>public.user_personal_info.user_id</code>.
     */
    public final TableField<UserPersonalInfoRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_personal_info.first_name</code>.
     */
    public final TableField<UserPersonalInfoRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.user_personal_info.last_name</code>.
     */
    public final TableField<UserPersonalInfoRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.user_personal_info.date_of_birth</code>.
     */
    public final TableField<UserPersonalInfoRecord, LocalDate> DATE_OF_BIRTH = createField(DSL.name("date_of_birth"), SQLDataType.LOCALDATE, this, "");

    /**
     * The column <code>public.user_personal_info.phone_number</code>.
     */
    public final TableField<UserPersonalInfoRecord, String> PHONE_NUMBER = createField(DSL.name("phone_number"), SQLDataType.VARCHAR(12), this, "");

    /**
     * The column <code>public.user_personal_info.address</code>.
     */
    public final TableField<UserPersonalInfoRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>public.user_personal_info.city</code>.
     */
    public final TableField<UserPersonalInfoRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>public.user_personal_info.timestamp_of_creation</code>.
     */
    public final TableField<UserPersonalInfoRecord, LocalDateTime> TIMESTAMP_OF_CREATION = createField(DSL.name("timestamp_of_creation"), SQLDataType.LOCALDATETIME(6), this, "");

    private UserPersonalInfo(Name alias, Table<UserPersonalInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserPersonalInfo(Name alias, Table<UserPersonalInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_personal_info</code> table reference
     */
    public UserPersonalInfo(String alias) {
        this(DSL.name(alias), USER_PERSONAL_INFO);
    }

    /**
     * Create an aliased <code>public.user_personal_info</code> table reference
     */
    public UserPersonalInfo(Name alias) {
        this(alias, USER_PERSONAL_INFO);
    }

    /**
     * Create a <code>public.user_personal_info</code> table reference
     */
    public UserPersonalInfo() {
        this(DSL.name("user_personal_info"), null);
    }

    public <O extends Record> UserPersonalInfo(Table<O> child, ForeignKey<O, UserPersonalInfoRecord> key) {
        super(child, key, USER_PERSONAL_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserPersonalInfoRecord> getPrimaryKey() {
        return Keys.USER_PERSONAL_INFO_PKEY;
    }

    @Override
    public List<ForeignKey<UserPersonalInfoRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_PERSONAL_INFO__USER_PERSONAL_INFO_FK);
    }

    private transient User _user;

    /**
     * Get the implicit join path to the <code>public.user</code> table.
     */
    public User user() {
        if (_user == null)
            _user = new User(this, Keys.USER_PERSONAL_INFO__USER_PERSONAL_INFO_FK);

        return _user;
    }

    @Override
    public UserPersonalInfo as(String alias) {
        return new UserPersonalInfo(DSL.name(alias), this);
    }

    @Override
    public UserPersonalInfo as(Name alias) {
        return new UserPersonalInfo(alias, this);
    }

    @Override
    public UserPersonalInfo as(Table<?> alias) {
        return new UserPersonalInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPersonalInfo rename(String name) {
        return new UserPersonalInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPersonalInfo rename(Name name) {
        return new UserPersonalInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPersonalInfo rename(Table<?> name) {
        return new UserPersonalInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, String, String, LocalDate, String, String, String, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Long, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Long, ? super String, ? super String, ? super LocalDate, ? super String, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
