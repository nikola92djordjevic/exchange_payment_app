/*
 * This file is generated by jOOQ.
 */
package PlatniPrometDB.tables;


import PlatniPrometDB.Keys;
import PlatniPrometDB.Public;
import PlatniPrometDB.tables.records.UserAuthRecord;

import java.time.LocalDate;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserAuth extends TableImpl<UserAuthRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_auth</code>
     */
    public static final UserAuth USER_AUTH = new UserAuth();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserAuthRecord> getRecordType() {
        return UserAuthRecord.class;
    }

    /**
     * The column <code>public.user_auth.user_id</code>.
     */
    public final TableField<UserAuthRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_auth.salt</code>.
     */
    public final TableField<UserAuthRecord, String> SALT = createField(DSL.name("salt"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.user_auth.iteration</code>.
     */
    public final TableField<UserAuthRecord, Integer> ITERATION = createField(DSL.name("iteration"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.user_auth.hash</code>.
     */
    public final TableField<UserAuthRecord, String> HASH = createField(DSL.name("hash"), SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.user_auth.login_count</code>.
     */
    public final TableField<UserAuthRecord, Integer> LOGIN_COUNT = createField(DSL.name("login_count"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.user_auth.fl_locked</code>.
     */
    public final TableField<UserAuthRecord, Boolean> FL_LOCKED = createField(DSL.name("fl_locked"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.user_auth.date_of_expiry</code>.
     */
    public final TableField<UserAuthRecord, LocalDate> DATE_OF_EXPIRY = createField(DSL.name("date_of_expiry"), SQLDataType.LOCALDATE, this, "");

    private UserAuth(Name alias, Table<UserAuthRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserAuth(Name alias, Table<UserAuthRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_auth</code> table reference
     */
    public UserAuth(String alias) {
        this(DSL.name(alias), USER_AUTH);
    }

    /**
     * Create an aliased <code>public.user_auth</code> table reference
     */
    public UserAuth(Name alias) {
        this(alias, USER_AUTH);
    }

    /**
     * Create a <code>public.user_auth</code> table reference
     */
    public UserAuth() {
        this(DSL.name("user_auth"), null);
    }

    public <O extends Record> UserAuth(Table<O> child, ForeignKey<O, UserAuthRecord> key) {
        super(child, key, USER_AUTH);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserAuthRecord> getPrimaryKey() {
        return Keys.USER_AUTH_PKEY;
    }

    @Override
    public UserAuth as(String alias) {
        return new UserAuth(DSL.name(alias), this);
    }

    @Override
    public UserAuth as(Name alias) {
        return new UserAuth(alias, this);
    }

    @Override
    public UserAuth as(Table<?> alias) {
        return new UserAuth(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAuth rename(String name) {
        return new UserAuth(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAuth rename(Name name) {
        return new UserAuth(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserAuth rename(Table<?> name) {
        return new UserAuth(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, Integer, String, Integer, Boolean, LocalDate> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super String, ? super Integer, ? super String, ? super Integer, ? super Boolean, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super String, ? super Integer, ? super String, ? super Integer, ? super Boolean, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
