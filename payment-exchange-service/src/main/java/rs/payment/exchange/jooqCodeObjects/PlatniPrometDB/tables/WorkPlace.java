/*
 * This file is generated by jOOQ.
 */
package PlatniPrometDB.tables;


import PlatniPrometDB.Keys;
import PlatniPrometDB.Public;
import PlatniPrometDB.tables.records.WorkPlaceRecord;

import java.time.OffsetDateTime;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WorkPlace extends TableImpl<WorkPlaceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.work_place</code>
     */
    public static final WorkPlace WORK_PLACE = new WorkPlace();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WorkPlaceRecord> getRecordType() {
        return WorkPlaceRecord.class;
    }

    /**
     * The column <code>public.work_place.work_place_id</code>.
     */
    public final TableField<WorkPlaceRecord, Long> WORK_PLACE_ID = createField(DSL.name("work_place_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("nextval(('public.work_place_seq'::text)::regclass)", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.work_place.cash_register_id</code>.
     */
    public final TableField<WorkPlaceRecord, Long> CASH_REGISTER_ID = createField(DSL.name("cash_register_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.work_place.user_id</code>.
     */
    public final TableField<WorkPlaceRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.work_place.timestamp_of_open</code>.
     */
    public final TableField<WorkPlaceRecord, OffsetDateTime> TIMESTAMP_OF_OPEN = createField(DSL.name("timestamp_of_open"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.work_place.timestamp_of_close</code>.
     */
    public final TableField<WorkPlaceRecord, OffsetDateTime> TIMESTAMP_OF_CLOSE = createField(DSL.name("timestamp_of_close"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    /**
     * The column <code>public.work_place.timestamp_of_creation</code>.
     */
    public final TableField<WorkPlaceRecord, OffsetDateTime> TIMESTAMP_OF_CREATION = createField(DSL.name("timestamp_of_creation"), SQLDataType.TIMESTAMPWITHTIMEZONE(6), this, "");

    private WorkPlace(Name alias, Table<WorkPlaceRecord> aliased) {
        this(alias, aliased, null);
    }

    private WorkPlace(Name alias, Table<WorkPlaceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.work_place</code> table reference
     */
    public WorkPlace(String alias) {
        this(DSL.name(alias), WORK_PLACE);
    }

    /**
     * Create an aliased <code>public.work_place</code> table reference
     */
    public WorkPlace(Name alias) {
        this(alias, WORK_PLACE);
    }

    /**
     * Create a <code>public.work_place</code> table reference
     */
    public WorkPlace() {
        this(DSL.name("work_place"), null);
    }

    public <O extends Record> WorkPlace(Table<O> child, ForeignKey<O, WorkPlaceRecord> key) {
        super(child, key, WORK_PLACE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<WorkPlaceRecord> getPrimaryKey() {
        return Keys.WORK_PLACE_PKEY;
    }

    @Override
    public WorkPlace as(String alias) {
        return new WorkPlace(DSL.name(alias), this);
    }

    @Override
    public WorkPlace as(Name alias) {
        return new WorkPlace(alias, this);
    }

    @Override
    public WorkPlace as(Table<?> alias) {
        return new WorkPlace(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkPlace rename(String name) {
        return new WorkPlace(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkPlace rename(Name name) {
        return new WorkPlace(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public WorkPlace rename(Table<?> name) {
        return new WorkPlace(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Long, Long, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super Long, ? super Long, ? super OffsetDateTime, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
