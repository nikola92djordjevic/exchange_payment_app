/*
 * This file is generated by jOOQ.
 */
package PlatniPrometDB.tables;


import PlatniPrometDB.Keys;
import PlatniPrometDB.Public;
import PlatniPrometDB.tables.records.CashRegisterRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CashRegister extends TableImpl<CashRegisterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.cash_register</code>
     */
    public static final CashRegister CASH_REGISTER = new CashRegister();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CashRegisterRecord> getRecordType() {
        return CashRegisterRecord.class;
    }

    /**
     * The column <code>public.cash_register.cash_register_id</code>.
     */
    public final TableField<CashRegisterRecord, Long> CASH_REGISTER_ID = createField(DSL.name("cash_register_id"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("nextval(('public.cash_register_seq'::text)::regclass)", SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.cash_register.name</code>.
     */
    public final TableField<CashRegisterRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>public.cash_register.fl_active</code>.
     */
    public final TableField<CashRegisterRecord, Boolean> FL_ACTIVE = createField(DSL.name("fl_active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("true", SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.cash_register.timestamp_of_creation</code>.
     */
    public final TableField<CashRegisterRecord, OffsetDateTime> TIMESTAMP_OF_CREATION = createField(DSL.name("timestamp_of_creation"), SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.cash_register.fl_in_use</code>.
     */
    public final TableField<CashRegisterRecord, Boolean> FL_IN_USE = createField(DSL.name("fl_in_use"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.cash_register.fl_treasury</code>.
     */
    public final TableField<CashRegisterRecord, Boolean> FL_TREASURY = createField(DSL.name("fl_treasury"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field("false", SQLDataType.BOOLEAN)), this, "");

    private CashRegister(Name alias, Table<CashRegisterRecord> aliased) {
        this(alias, aliased, null);
    }

    private CashRegister(Name alias, Table<CashRegisterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.cash_register</code> table reference
     */
    public CashRegister(String alias) {
        this(DSL.name(alias), CASH_REGISTER);
    }

    /**
     * Create an aliased <code>public.cash_register</code> table reference
     */
    public CashRegister(Name alias) {
        this(alias, CASH_REGISTER);
    }

    /**
     * Create a <code>public.cash_register</code> table reference
     */
    public CashRegister() {
        this(DSL.name("cash_register"), null);
    }

    public <O extends Record> CashRegister(Table<O> child, ForeignKey<O, CashRegisterRecord> key) {
        super(child, key, CASH_REGISTER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<CashRegisterRecord> getPrimaryKey() {
        return Keys.CASH_REGISTER_PKEY;
    }

    @Override
    public List<UniqueKey<CashRegisterRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.CASH_REGISTER_NAME_KEY);
    }

    @Override
    public CashRegister as(String alias) {
        return new CashRegister(DSL.name(alias), this);
    }

    @Override
    public CashRegister as(Name alias) {
        return new CashRegister(alias, this);
    }

    @Override
    public CashRegister as(Table<?> alias) {
        return new CashRegister(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CashRegister rename(String name) {
        return new CashRegister(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CashRegister rename(Name name) {
        return new CashRegister(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CashRegister rename(Table<?> name) {
        return new CashRegister(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, String, Boolean, OffsetDateTime, Boolean, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Long, ? super String, ? super Boolean, ? super OffsetDateTime, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Long, ? super String, ? super Boolean, ? super OffsetDateTime, ? super Boolean, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
