/*
 * This file is generated by jOOQ.
 */
package PlatniPrometDB.tables.records;


import PlatniPrometDB.tables.ExchangeRate;

import java.time.LocalDate;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExchangeRateRecord extends UpdatableRecordImpl<ExchangeRateRecord> implements Record8<Long, LocalDate, LocalDate, Boolean, Long, LocalDateTime, Long, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.exchange_rate.exchange_rate_id</code>.
     */
    public void setExchangeRateId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.exchange_rate.exchange_rate_id</code>.
     */
    public Long getExchangeRateId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.exchange_rate.timestamp_of_start</code>.
     */
    public void setTimestampOfStart(LocalDate value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.exchange_rate.timestamp_of_start</code>.
     */
    public LocalDate getTimestampOfStart() {
        return (LocalDate) get(1);
    }

    /**
     * Setter for <code>public.exchange_rate.timestamp_of_end</code>.
     */
    public void setTimestampOfEnd(LocalDate value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.exchange_rate.timestamp_of_end</code>.
     */
    public LocalDate getTimestampOfEnd() {
        return (LocalDate) get(2);
    }

    /**
     * Setter for <code>public.exchange_rate.fl_active</code>.
     */
    public void setFlActive(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.exchange_rate.fl_active</code>.
     */
    public Boolean getFlActive() {
        return (Boolean) get(3);
    }

    /**
     * Setter for <code>public.exchange_rate.created_by</code>.
     */
    public void setCreatedBy(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.exchange_rate.created_by</code>.
     */
    public Long getCreatedBy() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>public.exchange_rate.timestamp_of_creation</code>.
     */
    public void setTimestampOfCreation(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.exchange_rate.timestamp_of_creation</code>.
     */
    public LocalDateTime getTimestampOfCreation() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>public.exchange_rate.changed_by</code>.
     */
    public void setChangedBy(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.exchange_rate.changed_by</code>.
     */
    public Long getChangedBy() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>public.exchange_rate.timestamp_of_change</code>.
     */
    public void setTimestampOfChange(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.exchange_rate.timestamp_of_change</code>.
     */
    public LocalDateTime getTimestampOfChange() {
        return (LocalDateTime) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, LocalDate, LocalDate, Boolean, Long, LocalDateTime, Long, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, LocalDate, LocalDate, Boolean, Long, LocalDateTime, Long, LocalDateTime> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ExchangeRate.EXCHANGE_RATE.EXCHANGE_RATE_ID;
    }

    @Override
    public Field<LocalDate> field2() {
        return ExchangeRate.EXCHANGE_RATE.TIMESTAMP_OF_START;
    }

    @Override
    public Field<LocalDate> field3() {
        return ExchangeRate.EXCHANGE_RATE.TIMESTAMP_OF_END;
    }

    @Override
    public Field<Boolean> field4() {
        return ExchangeRate.EXCHANGE_RATE.FL_ACTIVE;
    }

    @Override
    public Field<Long> field5() {
        return ExchangeRate.EXCHANGE_RATE.CREATED_BY;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return ExchangeRate.EXCHANGE_RATE.TIMESTAMP_OF_CREATION;
    }

    @Override
    public Field<Long> field7() {
        return ExchangeRate.EXCHANGE_RATE.CHANGED_BY;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return ExchangeRate.EXCHANGE_RATE.TIMESTAMP_OF_CHANGE;
    }

    @Override
    public Long component1() {
        return getExchangeRateId();
    }

    @Override
    public LocalDate component2() {
        return getTimestampOfStart();
    }

    @Override
    public LocalDate component3() {
        return getTimestampOfEnd();
    }

    @Override
    public Boolean component4() {
        return getFlActive();
    }

    @Override
    public Long component5() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime component6() {
        return getTimestampOfCreation();
    }

    @Override
    public Long component7() {
        return getChangedBy();
    }

    @Override
    public LocalDateTime component8() {
        return getTimestampOfChange();
    }

    @Override
    public Long value1() {
        return getExchangeRateId();
    }

    @Override
    public LocalDate value2() {
        return getTimestampOfStart();
    }

    @Override
    public LocalDate value3() {
        return getTimestampOfEnd();
    }

    @Override
    public Boolean value4() {
        return getFlActive();
    }

    @Override
    public Long value5() {
        return getCreatedBy();
    }

    @Override
    public LocalDateTime value6() {
        return getTimestampOfCreation();
    }

    @Override
    public Long value7() {
        return getChangedBy();
    }

    @Override
    public LocalDateTime value8() {
        return getTimestampOfChange();
    }

    @Override
    public ExchangeRateRecord value1(Long value) {
        setExchangeRateId(value);
        return this;
    }

    @Override
    public ExchangeRateRecord value2(LocalDate value) {
        setTimestampOfStart(value);
        return this;
    }

    @Override
    public ExchangeRateRecord value3(LocalDate value) {
        setTimestampOfEnd(value);
        return this;
    }

    @Override
    public ExchangeRateRecord value4(Boolean value) {
        setFlActive(value);
        return this;
    }

    @Override
    public ExchangeRateRecord value5(Long value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public ExchangeRateRecord value6(LocalDateTime value) {
        setTimestampOfCreation(value);
        return this;
    }

    @Override
    public ExchangeRateRecord value7(Long value) {
        setChangedBy(value);
        return this;
    }

    @Override
    public ExchangeRateRecord value8(LocalDateTime value) {
        setTimestampOfChange(value);
        return this;
    }

    @Override
    public ExchangeRateRecord values(Long value1, LocalDate value2, LocalDate value3, Boolean value4, Long value5, LocalDateTime value6, Long value7, LocalDateTime value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExchangeRateRecord
     */
    public ExchangeRateRecord() {
        super(ExchangeRate.EXCHANGE_RATE);
    }

    /**
     * Create a detached, initialised ExchangeRateRecord
     */
    public ExchangeRateRecord(Long exchangeRateId, LocalDate timestampOfStart, LocalDate timestampOfEnd, Boolean flActive, Long createdBy, LocalDateTime timestampOfCreation, Long changedBy, LocalDateTime timestampOfChange) {
        super(ExchangeRate.EXCHANGE_RATE);

        setExchangeRateId(exchangeRateId);
        setTimestampOfStart(timestampOfStart);
        setTimestampOfEnd(timestampOfEnd);
        setFlActive(flActive);
        setCreatedBy(createdBy);
        setTimestampOfCreation(timestampOfCreation);
        setChangedBy(changedBy);
        setTimestampOfChange(timestampOfChange);
    }

    /**
     * Create a detached, initialised ExchangeRateRecord
     */
    public ExchangeRateRecord(PlatniPrometDB.tables.pojos.ExchangeRate value) {
        super(ExchangeRate.EXCHANGE_RATE);

        if (value != null) {
            setExchangeRateId(value.getExchangeRateId());
            setTimestampOfStart(value.getTimestampOfStart());
            setTimestampOfEnd(value.getTimestampOfEnd());
            setFlActive(value.getFlActive());
            setCreatedBy(value.getCreatedBy());
            setTimestampOfCreation(value.getTimestampOfCreation());
            setChangedBy(value.getChangedBy());
            setTimestampOfChange(value.getTimestampOfChange());
        }
    }
}
