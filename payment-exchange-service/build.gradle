buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        /* See above for the correct groupId */
        //classpath 'org.jooq:jooq-codegen:3.17.5'

        //classpath 'org.postgresql:postgresql:42.2.10'

        classpath 'nu.studer:gradle-jooq-plugin:1.0.5'
        classpath 'net.sourceforge.jtds:jtds:1.3.1'


        /*classpath group: 'org.jooq', name: 'jooq', version: '3.17.4'
        classpath group: 'org.jooq', name: 'jooq-meta', version: '3.17.4'
        classpath group: 'org.jooq', name: 'jooq-codegen', version: '3.17.4'
*/
        classpath group: 'org.postgresql', name: 'postgresql', version: '42.2.16'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.5'
    id 'io.spring.dependency-management' version '1.0.15.RELEASE'
    id 'nu.studer.jooq' version '8.0'
}


apply plugin: 'nu.studer.jooq'


group = 'rs.exchange.pay'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'


def jjwtVersion = '0.11.2'

repositories {
    mavenLocal()
    mavenCentral()
}
configurations {
    driver
}

ext.db = [
        url        : 'jdbc:postgresql://localhost:5432/platni_promet_db',
        user       : 'postgres',
        password   : 'pr0gr3ss',
        schema     : 'public',
        driver     : 'org.postgresql.Driver',
        jooqDbImpl : 'org.jooq.meta.postgres.PostgresDatabase',
        packageName: 'PlatniPrometDB'
]

ext.genpath = new File("${projectDir}/src/main/java/rs/payment/exchange/jooqCodeObjects") /* /build/generated/source/jooq/main")*/


dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'org.springframework.data:spring-data-jpa'

    runtimeOnly 'org.postgresql:postgresql'

    implementation 'org.jooq:jooq:3.17.5'
    implementation 'org.jooq:jooq-meta:3.13.4'
    implementation 'org.jooq:jooq-codegen:3.13.4'

    driver 'org.postgresql:postgresql:42.2.26'

    compileOnly 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.2'

    compileOnly 'javax.json.bind:javax.json.bind-api:1.0'

    compileOnly 'org.glassfish:javax.json:1.1'

    implementation 'jakarta.json.bind:jakarta.json.bind-api:1.0.2'

    runtimeOnly 'org.eclipse:yasson:1.0.7'

    compileOnly 'jakarta.json.bind:jakarta.json.bind-api:1.0.2'

    implementation 'io.springfox:springfox-swagger2:2.6.0'

    runtimeOnly 'com.h2database:h2:2.1.212'


}

ext.db = [
        url        : 'jdbc:postgresql://localhost:5432/platni_promet_db',
        user       : 'postgres',
        password   : 'pr0gr3ss',
        schema     : 'public',
        driver     : 'org.postgresql.Driver',
        jooqDbImpl : 'org.jooq.meta.postgres.PostgresDatabase',
        packageName: 'PlatniPrometDB'
]

import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

sourceSets.main.java.srcDirs += genpath.toString()

      task Jooq_GenerateCode() {
          if (!genpath.exists()) {
              genpath.mkdirs()
          }
          Configuration configuration = new Configuration()
                  .withJdbc(new Jdbc()
                          .withDriver('org.postgresql.Driver')
                          .withUrl('jdbc:postgresql://localhost:5432/platni_promet_db')
                          .withUser('postgres')
                          .withPassword('pr0gr3ss')
                  )
                  .withGenerator(new Generator()
                          .withGenerate(new Generate()
                                  .withPojos(true)
                                  .withDaos(true)
                                  .withUdts(true)
                                  .withSequences(true))
                          .withDatabase(new Database()
                                  .withName('org.jooq.meta.postgres.PostgresDatabase')
                                  .withIncludes(".*")
                                  .withInputSchema('public')
                          )
                          .withTarget(new Target()
                                  .withPackageName('PlatniPrometDB')
                                  .withDirectory(genpath.toString())
                          )
                  );
          GenerationTool.generate(configuration);
      }

      task Jooq_DeleteCode(type: Delete) {
          delete genpath
      }

